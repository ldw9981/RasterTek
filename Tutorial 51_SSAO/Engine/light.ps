////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D colorTexture : register(t0);
Texture2D normalTexture : register(t1);
Texture2D positionTexture : register(t2);

///////////////////
// SAMPLE STATES //
///////////////////
SamplerState SampleTypePoint : register(s0);


//////////////////////
// CONSTANT BUFFERS //
//////////////////////
cbuffer MatrixBuffer : register(b0)
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
};

cbuffer LightBuffer : register(b1)
{
    float3 lightDirection;
	float padding1;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float3 GenerateHemisphereSample(float3 worldPos, float3 normal, float random1, float random2, float random3, float radius)
{
    // Create tangent and bitangent vectors to form the TBN matrix
    float3 tangent = normalize(cross(float3(0.0, 1.0, 0.0), normal));
    if (length(tangent) < 0.001) // Handle edge case when normal is close to Y axis
    {
        tangent = normalize(cross(float3(1.0, 0.0, 0.0), normal));
    }
    float3 bitangent = normalize(cross(normal, tangent));
    
    // TBN matrix
    float3x3 TBN = float3x3(tangent, bitangent, normal);
    
    // Generate random point in hemisphere
    float theta = random1 * 2.0 * 3.14159265359; // Azimuthal angle [0, 2π]
    float phi = acos(random2);                  // Polar angle [0, π/2]

    float x = sin(phi) * cos(theta);
    float y = sin(phi) * sin(theta);
    float z = cos(phi);

    float3 sampleDir = float3(x, y, z); // Local space direction in hemisphere

    // Apply random scale to sample direction based on radius
    float sampleDistance = random3 * radius; // Scale the sample within the given radius
    sampleDir *= sampleDistance;

    // Transform sample direction to world space using TBN matrix
    float3 worldSampleDir = mul(TBN, sampleDir);

    return worldPos + worldSampleDir; // Return the sample position in world space
}



////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 colors;
	float4 normals;
	float4 worldPosition;
	float3 lightDir;
	float lightIntensity;
	float4 outputColor;
	float3 cameraPosition;

	cameraPosition = -viewMatrix[3].xyz;
	normalize(cameraPosition);

	// Sample the colors from the color render texture using the point sampler at this texture coordinate location.
	colors = colorTexture.Sample(SampleTypePoint, input.tex);

	// Sample the normals from the normal render texture using the point sampler at this texture coordinate location.
	normals = normalTexture.Sample(SampleTypePoint, input.tex);
	
	worldPosition = positionTexture.Sample(SampleTypePoint, input.tex);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(normals.xyz, lightDir));

    // Determine the final amount of diffuse color based on the color of the pixel combined with the light intensity.
    outputColor = saturate(colors * lightIntensity);

    return outputColor;
}
